# .github/workflows/docker-build.yml
name: Build and Deploy

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_BACKEND: secrets.ECR_REPOSITORY_BACKEND
  ECR_REPOSITORY_FRONTEND: secrets.ECR_REPOSITORY_FRONTEND
  PYTHON_VERSION: "3.11.10"
  POETRY_VERSION: "1.8.2"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          python3-dev \
          gcc \
          g++ \
          curl \
          git

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python3 -
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
    
    - name: Setup test environment
      working-directory: ./backend
      run: |
        echo 'DATABASE_URL="sqlite:///:memory:"' > .env
        echo 'SECRET_KEY="test-secret-key"' >> .env
        echo 'BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8000"]' >> .env
        echo 'TESTING=true' >> .env
    
    - name: Install dependencies
      working-directory: ./backend
      run: poetry install --no-interaction --no-root
        
    - name: Run tests
      working-directory: ./backend
      env:
        TESTING: "true"
        DATABASE_URL: "sqlite:///:memory:"
        SECRET_KEY: "test-secret-key"
        BACKEND_CORS_ORIGINS: '["http://localhost:3000","http://localhost:8000"]'
      run: poetry run pytest

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  build-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
    
    - name: Build and push fron